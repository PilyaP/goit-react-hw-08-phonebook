{"version":3,"file":"static/js/107.9b0ab944.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\n// export const Container = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n// `;\n\nexport const StyledForm = styled.form`\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 16px;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n\n  .form-title {\n    margin-top: 0;\n    font-size: 32px;\n    text-align: center;\n    \n      &:focus {\n        outline: none;\n        box-shadow: 0 0 5px #4285f4;\n      }\n    }\n  \n\n  .form-label {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n    font-size: 16px;\n  }\n  .form-btn {\n    padding: 8px;\n    font-size: 16px;\n    font-weight: 700;\n    color: #fff;\n    background-color: #4285f4;\n    border: none;\n    border-radius: 4px;\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n\n    &:hover {\n      background-color: #3367d6;\n    }\n\n    &:active {\n      background-color: #115293;\n    }\n  }\n\n  .form-span\n  {\n     margin-bottom: 8px;\n    font-weight: 700;\n  }\n  .form-input{\n    padding: 8px;\n    font-size: 16px;\n    border-radius: 4px;\n    border: none;\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  }\n`;\n\n","import React, { useState } from 'react';\nimport { StyledForm } from './ContactForm.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactForm = ({ onSubmit, title }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ name: name.trim(), number: number.trim() });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <h1 className=\"form-title\">{title}</h1>\n      <label className=\"form-label\">\n        <span className=\"form-span\">Name:</span>\n        <input\n          className=\"form-input\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label className=\"form-label\">\n        <span className=\"form-span\">Number:</span>\n        <input\n          className=\"form-input\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className=\"form-btn\">\n        Add Contact\n      </button>\n    </StyledForm>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  margin-bottom: 10px;\n  background-color: #fff;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n  .contact-name {\n    font-weight: 700;\n    margin-right: 10px;\n    font-size: 14px;\n    color: #666;\n  }\n\n  .icon.active {\n    path {\n      fill: red;\n    }\n  }\n  .fav-btn {\n    border: none;\n    background-color: transparent;\n    padding: 0;\n    cursor: pointer;\n  }\n  .iconbutton-delete:hover {\n     path {\n      fill: red;\n  }\n\n  .bnt-name {\n    width: 70px;\n    border: none;\n    cursor: pointer;\n    border-radius: 10px;\n    &:hover {\n      background-color: #3367d6;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactsItem } from './ContactList.styled';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleFavorite } from 'redux/contactSlice';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  const dispatch = useDispatch();\n\n  const favContactsIds = useSelector(\n    state => state.contacts.favoriteContactIds\n  );\n\n  const favoriteContacts = contacts.filter(contact =>\n    favContactsIds.includes(contact.id)\n  );\n  const nonFavContacts = contacts.filter(\n    contact => !favContactsIds.includes(contact.id)\n  );\n\n  const onToggleFav = contactId => {\n    dispatch(toggleFavorite(contactId));\n  };\n\n  return (\n    <ul>\n      {favoriteContacts.map(({ id, name, number }) => {\n        return (\n          <ContactsItem key={id}>\n            <p className=\"contact-name\">\n              <button\n                onClick={() => onToggleFav(id)}\n                type=\"button\"\n                className=\"fav-btn\"\n              >\n                <FavoriteBorderIcon className=\"icon active\" />\n              </button>{' '}\n              {name}: {number}\n            </p>\n            {/* <button type=\"button\" className=\"bnt-name\">\n              Delete\n            </button> */}\n            <IconButton\n              onClick={() => deleteContact(id)}\n              aria-label=\"delete\"\n              size=\"large\"\n            >\n              <DeleteIcon fontSize=\"inherit\" />\n            </IconButton>\n          </ContactsItem>\n        );\n      })}\n      {nonFavContacts.map(({ id, name, number }) => {\n        return (\n          <ContactsItem key={id}>\n            <p className=\"contact-name\">\n              <button\n                onClick={() => onToggleFav(id)}\n                type=\"button\"\n                className=\"fav-btn\"\n              >\n                <FavoriteBorderIcon className=\"icon\" />\n              </button>{' '}\n              {name}: {number}\n            </p>\n            {/* <button\n              type=\"button\"\n              onClick={() => deleteContact(id)}\n              className=\"bnt-name\"\n            >\n              Delete\n            </button> */}\n            <IconButton\n              onClick={() => deleteContact(id)}\n              aria-label=\"delete\"\n              size=\"large\"\n              className=\"iconbutton-delete\"\n            >\n              <DeleteIcon className=\"iconbutton-delete\" fontSize=\"inherit\" />\n            </IconButton>\n          </ContactsItem>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n\n// import React, { useState } from 'react';\n// import List from 'your-list-library';\n// import ItemDragging from 'your-item-dragging-library';\n\n// const App = () => {\n//   const [plannedTasks, setPlannedTasks] = useState([]);\n//   const [doingTasks, setDoingTasks] = useState([]);\n\n//   const onDragStart = (e) => {\n//     // Handle drag start event\n//   };\n\n//   const onAdd = (e) => {\n//     const tasks = [...e.toData];\n//     tasks.splice(e.toIndex, 0, e.itemData);\n//     e.toData === 'plannedTasks' ? setPlannedTasks(tasks) : setDoingTasks(tasks);\n//   };\n\n//   const onRemove = (e) => {\n//     const tasks = [...e.fromData];\n//     tasks.splice(e.fromIndex, 1);\n//     e.fromData === '' ? setPlannedTasks(tasks) : setDoingTasks(tasks);\n//   };\n\n//   const onReorder = (e) => {\n//     onRemove(e);\n//     onAdd(e);\n//   };\n\n//   return (\n//     <div className=\"widget-container\">\n//       <List dataSource={plannedTasks} keyExpr=\"id\">\n//         <ItemDragging\n//           allowReordering={true}\n//           group=\"tasks\"\n//           data=\"\"\n//           onDragStart={onDragStart}\n//           onAdd={onAdd}\n//           onRemove={onRemove}\n//           onReorder={onReorder}\n//         />\n//       </List>\n//     </div>\n//   );\n// };\n\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// import { ContactsItem } from './ContactList.styled';\n// import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { toggleFavorite } from 'redux/contactSlice';\n// import IconButton from '@mui/material/IconButton';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// const ContactList = ({ contacts, deleteContact }) => {\n//   const dispatch = useDispatch();\n\n//   const favContactsIds = useSelector(\n//     state => state.contacts.favoriteContactIds\n//   );\n\n//   const favoriteContacts = contacts.filter(contact =>\n//     favContactsIds.includes(contact.id)\n//   );\n//   const nonFavContacts = contacts.filter(\n//     contact => !favContactsIds.includes(contact.id)\n//   );\n\n//   const onToggleFav = contactId => {\n//     dispatch(toggleFavorite(contactId));\n//   };\n\n//   const onDragEnd = result => {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const { source, destination } = result;\n\n//     if (\n//       source.droppableId === 'favoriteContacts' &&\n//       destination.droppableId === 'favoriteContacts'\n//     ) {\n//       const newFavoriteContacts = Array.from(favoriteContacts);\n//       const [movedContact] = newFavoriteContacts.splice(source.index, 1);\n//       newFavoriteContacts.splice(destination.index, 0, movedContact);\n\n//     } else if (source.droppableId !== destination.droppableId) {\n//       const newFavoriteContacts = Array.from(favoriteContacts);\n//       const newNonFavContacts = Array.from(nonFavContacts);\n//       const [movedContact] =\n//         source.droppableId === 'favoriteContacts'\n//           ? newFavoriteContacts.splice(source.index, 1)\n//           : newNonFavContacts.splice(source.index, 1);\n\n//       if (destination.droppableId === 'favoriteContacts') {\n//         newFavoriteContacts.splice(destination.index, 0, movedContact);\n//       } else {\n//         newNonFavContacts.splice(destination.index, 0, movedContact);\n//       }\n\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <ul>\n//         <Droppable droppableId=\"favoriteContacts\">\n//           {provided => (\n//             <div ref={provided.innerRef} {...provided.droppableProps}>\n//               {favoriteContacts.map(({ id, name, number }, index) => (\n//                 <Draggable key={id} draggableId={id} index={index}>\n//                   {provided => (\n//                     <ContactsItem\n//                       ref={provided.innerRef}\n//                       {...provided.draggableProps}\n//                       {...provided.dragHandleProps}\n//                     >\n//                       <p className=\"contact-name\">\n//                         <button\n//                           onClick={() => onToggleFav(id)}\n//                           type=\"button\"\n//                           className=\"fav-btn\"\n//                         >\n//                           <FavoriteBorderIcon className=\"icon active\" />\n//                         </button>{' '}\n//                         {name}: {number}\n//                       </p>\n//                       <IconButton\n//                         onClick={() => deleteContact(id)}\n//                         aria-label=\"delete\"\n//                         size=\"large\"\n//                       >\n//                         <DeleteIcon fontSize=\"inherit\" />\n//                       </IconButton>\n//                     </ContactsItem>\n//                   )}\n//                 </Draggable>\n//               ))}\n//               {provided.placeholder}\n//             </div>\n//           )}\n//         </Droppable>\n//         {nonFavContacts.map(({ id, name, number }, index) => (\n//           <Draggable key={id} draggableId={id} index={index}>\n//             {provided => (\n//               <ContactsItem\n//                 ref={provided.innerRef}\n//                 {...provided.draggableProps}\n//                 {...provided.dragHandleProps}\n//               >\n//                 <p className=\"contact-name\">\n//                   <button\n//                     onClick={() => onToggleFav(id)}\n//                     type=\"button\"\n//                     className=\"fav-btn\"\n//                   >\n//                     <FavoriteBorderIcon className=\"icon\" />\n//                   </button>{' '}\n//                   {name}: {number}\n//                 </p>\n//                 <IconButton\n//                   onClick={() => deleteContact(id)}\n//                   aria-label=\"delete\"\n//                   size=\"large\"\n//                 >\n//                   <DeleteIcon fontSize=\"inherit\" />\n//                 </IconButton>\n//               </ContactsItem>\n//             )}\n//           </Draggable>\n//         ))}\n//       </ul>\n//     </DragDropContext>\n//   );\n// };\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   deleteContact: PropTypes.func.isRequired,\n// };\n\n// export default ContactList;\n\n// import PropTypes from 'prop-types';\n// import { ContactsItem } from './ContactList.styled';\n// import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { toggleFavorite } from 'redux/contactSlice';\n// import IconButton from '@mui/material/IconButton';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import {\n//   updateFavoriteContacts,\n//   updateNonFavoriteContacts,\n// } from 'redux/contactOperations';\n\n// const ContactList = ({ contacts, deleteContact }) => {\n//   const dispatch = useDispatch();\n\n//   const favoriteContactIds = useSelector(\n//     state => state.contacts.favoriteContactIds\n//   );\n\n//   const favoriteContacts = contacts.filter(contact =>\n//     favoriteContactIds.includes(contact.id)\n//   );\n//   const nonFavoriteContacts = contacts.filter(\n//     contact => !favoriteContactIds.includes(contact.id)\n//   );\n\n//   const onToggleFavorite = contactId => {\n//     dispatch(toggleFavorite(contactId));\n//   };\n\n//   const onDragEnd = result => {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const { source, destination } = result;\n\n//     if (\n//       source.droppableId === destination.droppableId &&\n//       source.index === destination.index\n//     ) {\n//       return;\n//     }\n\n//     if (source.droppableId === destination.droppableId) {\n//       const updatedContacts =\n//         source.droppableId === 'favoriteContacts'\n//           ? Array.from(favoriteContacts)\n//           : Array.from(nonFavoriteContacts);\n\n//       const [movedContact] = updatedContacts.splice(source.index, 1);\n//       updatedContacts.splice(destination.index, 0, movedContact);\n\n//       if (source.droppableId === 'favoriteContacts') {\n//         dispatch(updateFavoriteContacts(updatedContacts));\n//       } else {\n//         dispatch(updateNonFavoriteContacts(updatedContacts));\n//       }\n//     } else {\n//       const updatedFavoriteContacts = Array.from(favoriteContacts);\n//       const updatedNonFavoriteContacts = Array.from(nonFavoriteContacts);\n\n//       const [movedContact] = updatedFavoriteContacts.splice(source.index, 1);\n//       updatedNonFavoriteContacts.splice(destination.index, 0, movedContact);\n\n//       dispatch(updateFavoriteContacts(updatedFavoriteContacts));\n//       dispatch(updateNonFavoriteContacts(updatedNonFavoriteContacts));\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <Droppable droppableId=\"favoriteContacts\">\n//         {(provided, snapshot) => (\n//           <ul ref={provided.innerRef} {...provided.droppableProps}>\n//             {favoriteContacts.map(({ id, name, number }, index) => (\n//               <Draggable key={id} draggableId={id} index={index}>\n//                 {(provided, snapshot) => (\n//                   <ContactsItem\n//                     ref={provided.innerRef}\n//                     {...provided.draggableProps}\n//                     {...provided.dragHandleProps}\n//                   >\n//                     <p className=\"contact-name\">\n//                       <button\n//                         onClick={() => onToggleFavorite(id)}\n//                         type=\"button\"\n//                         className=\"fav-btn\"\n//                       >\n//                         <FavoriteBorderIcon className=\"icon active\" />\n//                       </button>{' '}\n//                       {name}: {number}\n//                     </p>\n//                     <IconButton\n//                       onClick={() => deleteContact(id)}\n//                       aria-label=\"delete\"\n//                       size=\"large\"\n//                     >\n//                       <DeleteIcon fontSize=\"inherit\" />\n//                     </IconButton>\n//                   </ContactsItem>\n//                 )}\n//               </Draggable>\n//             ))}\n//             {provided.placeholder}\n//           </ul>\n//         )}\n//       </Droppable>\n//       <Droppable droppableId=\"nonFavoriteContacts\">\n//         {(provided, snapshot) => (\n//           <ul ref={provided.innerRef} {...provided.droppableProps}>\n//             {nonFavoriteContacts.map(({ id, name, number }, index) => (\n//               <Draggable key={id} draggableId={id} index={index}>\n//                 {(provided, snapshot) => (\n//                   <ContactsItem\n//                     ref={provided.innerRef}\n//                     {...provided.draggableProps}\n//                     {...provided.dragHandleProps}\n//                   >\n//                     <p className=\"contact-name\">\n//                       <button\n//                         onClick={() => onToggleFavorite(id)}\n//                         type=\"button\"\n//                         className=\"fav-btn\"\n//                       >\n//                         <FavoriteBorderIcon className=\"icon\" />\n//                       </button>{' '}\n//                       {name}: {number}\n//                     </p>\n//                     <IconButton\n//                       onClick={() => deleteContact(id)}\n//                       aria-label=\"delete\"\n//                       size=\"large\"\n//                     >\n//                       <DeleteIcon fontSize=\"inherit\" />\n//                     </IconButton>\n//                   </ContactsItem>\n//                 )}\n//               </Draggable>\n//             ))}\n//             {provided.placeholder}\n//           </ul>\n//         )}\n//       </Droppable>\n//     </DragDropContext>\n//   );\n// };\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   deleteContact: PropTypes.func.isRequired,\n// };\n\n// export default ContactList;\n","import styled from '@emotion/styled';\nimport TextField from '@mui/material/TextField';\n\nexport const StyledSearchInput = styled(TextField)`\n  .MuiInputBase-formControl {\n    background-color: transparent;\n  }\n`;\n\nexport const FilterItem = styled.form`\n  .filter-label {\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n  }\n  .filter-input {\n    border-radius: 4px;\n    border: none;\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n    width: 170px;\n    height: 25px;\n\n    padding: 0 15px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    font-size: 16px;\n  }\n  .filter-input:focus {\n    outline: none;\n  }\n\n  .filter-title {\n    margin-top: 0;\n    font-size: 26px;\n    text-align: center;\n    margin-top: 15px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterItem, StyledSearchInput } from './Filter.styled';\n\n// import { useDispatch, useSelector } from 'react-redux';\n// const Filter = ({ title }) => {\n//   const dispatch = useDispatch();\n//   const filter = useSelector(state => state.filter);\nconst Filter = ({ filter, changeFilterInput, title }) => (\n  //  return (\n  <FilterItem>\n    {title && <h2 className=\"filter-title\">{title}</h2>}\n    <div className=\"find-filter\">\n      <label className=\"filter-label\">Find contacts by name</label>\n      <StyledSearchInput\n        id=\"filled-search\"\n        label=\"Search field\"\n        type=\"search\"\n        variant=\"filled\"\n        name=\"name\"\n        value={filter}\n        onChange={changeFilterInput}\n      />\n    </div>\n  </FilterItem>\n);\n\nFilter.propTypes = {\n  title: PropTypes.string,\n  filter: PropTypes.string.isRequired,\n  changeFilterInput: PropTypes.func.isRequired,\n};\n// пропсы фильтр и changeFilterInput больше не передаются компоненту Filter?\nexport default Filter;\n","import { nanoid } from '@reduxjs/toolkit';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { useAuth } from 'components/hooks';\nimport { Notify } from 'notiflix';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addContactThunk,\n  deleteContactThunk,\n  fetchContacts,\n} from 'redux/contactOperations';\nimport { setFilter } from 'redux/filterSlice';\n\nexport default function Tasks() {\n  const { isLoggedIn } = useAuth();\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const filter = useSelector(state => state.filter.filter);\n\n  const formSubmit = ({ name, number }) => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const isContactExist = contacts.some(\n      i =>\n        i.name.toLowerCase() === contact.name.toLowerCase() ||\n        i.number === contact.number\n    );\n\n    if (isContactExist) {\n      Notify.failure(`${name} is already in phonebook.`);\n    } else {\n      dispatch(addContactThunk(contact));\n    }\n  };\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    dispatch(fetchContacts());\n  }, [dispatch, isLoggedIn]);\n\n  const changeFilterInput = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  const findContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase()) // \"     12\" -> \"12\"\n    );\n  };\n\n  const handleContactDelete = id => {\n    const contactName = contacts.find(contact => contact.id === id).name;\n    dispatch(deleteContactThunk(id));\n    Notify.warning(`${contactName} deleted from phonebook.`);\n  };\n\n  return (\n    <>\n      <ContactForm onSubmit={formSubmit} title=\"Phonebook\" />\n      <Filter\n        filter={filter}\n        changeFilterInput={changeFilterInput}\n        title=\"Contacts\"\n      />\n      {isLoading && <Loader />}\n      <ContactList\n        contacts={findContacts()}\n        deleteContact={handleContactDelete}\n      />\n    </>\n  );\n}\n"],"names":["StyledForm","styled","onSubmit","title","useState","name","setName","number","setNumber","handleChange","event","target","value","preventDefault","trim","className","type","pattern","required","onChange","ContactsItem","contacts","deleteContact","dispatch","useDispatch","favContactsIds","useSelector","state","favoriteContactIds","favoriteContacts","filter","contact","includes","id","nonFavContacts","onToggleFav","contactId","toggleFavorite","map","onClick","FavoriteBorder","IconButton","size","Delete","fontSize","StyledSearchInput","TextField","FilterItem","changeFilterInput","label","variant","Tasks","isLoggedIn","useAuth","isLoading","useEffect","fetchContacts","nanoid","some","i","toLowerCase","Notify","addContactThunk","e","setFilter","Loader","contactName","find","deleteContactThunk"],"sourceRoot":""}